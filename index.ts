// üß† B√†i 1: Ki·ªÉu c∆° b·∫£n
// Vi·∫øt h√†m nh·∫≠n v√†o 2 tham s·ªë: name (ki·ªÉu string) v√† age (ki·ªÉu number), tr·∫£ v·ªÅ chu·ªói d·∫°ng:
// "Name is Trang, age is 25"

console.log("===== B√†i 1: =====");
function getInfo(name: string, age: number) {
    return `Name is ${name}, age is ${age}`;
}

console.log(getInfo("Trung", 24));

// üß† B√†i 2: Interface & Object
// T·∫°o interface User g·ªìm c√°c thu·ªôc t√≠nh:
// id: s·ªë
// name: chu·ªói
// isAdmin: boolean

// Vi·∫øt h√†m printUserInfo(user: User) ƒë·ªÉ in ra th√¥ng tin ng∆∞·ªùi d√πng nh∆∞ sau:
// tsSao ch√©pCh·ªânh s·ª≠aID: 1
// Name: Trang
// Is Admin: true

console.log("===== B√†i 2: =====");
interface User {
    id: number;
    name: string;
    isAdmin: boolean;
}

function printUserInfo(user: User) {
    console.log(`ID: ${user.id}`);
    console.log(`Name: ${user.name}`);
    console.log(`Is Admin: ${user.isAdmin}`);   
}

printUserInfo({ id: 1, name: "Trung", isAdmin: true });

// üß† B√†i 3: Union & Type Alias
// Khai b√°o type t√™n l√† Status v·ªõi gi√° tr·ªã "pending" | "success" | "error".
// Vi·∫øt h√†m handleStatus(status: Status) in ra:

// "Loading..." n·∫øu l√† pending
// "Done!" n·∫øu l√† success
// "Failed!" n·∫øu l√† error

console.log("===== B√†i 3: =====");
type Status = "pending" | "success" | "error";
function handleStatus(status: Status) {
    if (status === "pending") {
        console.log("Loading...");
    } else if (status === "success") {
        console.log("Done!");
    } else {
        console.log("Failed!");
    }
}

handleStatus('error')

// üß† B√†i 4: Class & Constructor
// Vi·∫øt m·ªôt class Rectangle c√≥:

// 2 thu·ªôc t√≠nh: width, height (number)
// Constructor ƒë·ªÉ kh·ªüi t·∫°o 2 thu·ªôc t√≠nh
// Ph∆∞∆°ng th·ª©c getArea() tr·∫£ v·ªÅ di·ªán t√≠ch

console.log("===== B√†i 4: =====");
class Rectangle {
    width: number;
    height: number;

    constructor(width: number, height: number) {
        this.width = width;
        this.height = height;
    }

    getArea() {
        return this.width * this.height;
    }
}

const rectangle = new Rectangle(10, 20);
console.log(rectangle.getArea());

// üß† B√†i 5: Generic Function
// Vi·∫øt m·ªôt h√†m generic wrapInArray<T>(value: T): T[] ƒë·ªÉ ƒë∆∞a b·∫•t k·ª≥ gi√° tr·ªã n√†o v√†o m·ªôt m·∫£ng.
// V√≠ d·ª•:

// tsSao ch√©pCh·ªânh s·ª≠awrapInArray(5);         // [5]
// wrapInArray("hello");   // ["hello"]
// wrapInArray({ x: 1 });  // [{ x: 1 }]

console.log("===== B√†i 5: =====");
function wrapInArray<T>(value: T): T[] {
    return [value];
}
console.log(wrapInArray(5));

// üß† B√†i 6: Enum
// T·∫°o enum t√™n l√† Direction v·ªõi c√°c gi√° tr·ªã: Up, Down, Left, Right.
// Vi·∫øt h√†m move(direction: Direction) in ra:

// tsSao ch√©pCh·ªânh s·ª≠aMoving Up...
// Moving Down...
// ...

// enum (vi·∫øt t·∫Øt c·ªßa enumeration) l√† m·ªôt ki·ªÉu d·ªØ li·ªáu cho ph√©p b·∫°n ƒë·ªãnh nghƒ©a t·∫≠p h·ª£p c√°c h·∫±ng s·ªë c√≥ t√™n.

console.log("===== B√†i 6: =====");
enum Direction {
    Up,
    Down,
    Left,
    Right
}

function move(direction: Direction) {
    if (direction === Direction.Up) {
        console.log("Moving Up...");
    } else if (direction === Direction.Down) {
        console.log("Moving Down...");
    } else if (direction === Direction.Left) {
        console.log("Moving Left...");
    } else {
        console.log("Moving Right...");
    }
}

move(Direction.Up);

// üß† B√†i 7: Tuple & Array Destructuring
// Vi·∫øt h√†m getUserInfo() tr·∫£ v·ªÅ tuple g·ªìm: t√™n (string), tu·ªïi (number), ƒë√£ x√°c th·ª±c (boolean).
// Sau ƒë√≥ g·ªçi h√†m v√† d√πng destructuring ƒë·ªÉ in ra t·ª´ng gi√° tr·ªã.

// tsSao ch√©pCh·ªânh s·ª≠aconst [name, age, verified] = getUserInfo();

console.log("===== B√†i 7: =====");
function getUserInfo(): [string, number, boolean] {
    return ["Trung", 24, true];
}

const [username, age, verified] = getUserInfo();
console.log(username, age, verified);

// üß† B√†i 8: Optional & Default Params
// Vi·∫øt h√†m greet(name: string, greeting?: string).
// N·∫øu greeting kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o, m·∫∑c ƒë·ªãnh l√† "Hello".
// V√≠ d·ª•:

// tsSao ch√©pCh·ªânh s·ª≠agreet("Trang"); // Hello, Trang
// greet("Trang", "Hi"); // Hi, Trang

console.log("===== B√†i 8: =====");
function greet(username: string, greeting?: string) {
    const greetingMessage = greeting || "Hello";
    console.log(`${greetingMessage}, ${username}`);
}

greet("Trang");
greet("Trang", "Hi");

// üß† B√†i 9: Readonly & Immutability
// T·∫°o interface Config c√≥ c√°c thu·ªôc t√≠nh:

// tsSao ch√©pCh·ªânh s·ª≠a{
//   apiKey: string;
//   baseUrl: string;

console.log("===== B√†i 9: =====");
interface Config {
    readonly apiKey: string;
    readonly baseUrl: string;
}

const config: Config = {
    apiKey: "1234567890",
    baseUrl: "https://api.example.com",
}

console.log(config);

// üß† B√†i 10: Intersection Type
// T·∫°o 2 interface:

// tsSao ch√©pCh·ªânh s·ª≠ainterface Person {
//   name: string;
// }

// interface Employee {
//   employeeId: number;
// }
// D√πng intersection type (&) ƒë·ªÉ khai b√°o m·ªôt bi·∫øn staff c√≥ c·∫£ 2 ki·ªÉu. Sau ƒë√≥ in ra th√¥ng tin:

// tsSao ch√©pCh·ªânh s·ª≠aconst staff: Person & Employee = {
//   name: "Trang",
//   employeeId: 101,
// };

console.log("===== B√†i 10: =====");
interface Person {
    name: string;
}

interface Employee {
    employeeId: number;
}

const staff: Person & Employee = {
    name: "Trung",
    employeeId: 1208,
}

console.log(staff);
